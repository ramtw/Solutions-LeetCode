
def subdomainVisits(cpdomains):
    """
    Greedy approach to find the total coun
    :param cpdomains: The list of the codomain with the number of the requests
    :return: The return value should be the counted value and unique domain list
    """
    # Created Dictionary to store the unique identifiers for the domains
    wordDict = {}

    for i in range(len(cpdomains)):
        # split the numbers and domain and number should be at 0th position
        uniqueValue = cpdomains[i].split()
        domain = uniqueValue[1]
        # Initial find to check whether '.'
        indexOfDot = domain.find('.')
        # -1 if there is no '.' in the string
        while indexOfDot != -1:
            # If domain is unique/first time encouter by the system then it store the value in the dic else
            # increment the value
            if not domain in wordDict:
                wordDict[domain] = int(uniqueValue[0])
            else:

                wordDict[domain] += int(uniqueValue[0])

            domain = domain[indexOfDot+1:]
            indexOfDot = domain.find('.')

        # Edge  case that is no preceeding '.' like com, org
        if not domain in wordDict:
            wordDict[domain] = int(uniqueValue[0])
        else:

            wordDict[domain] += int(uniqueValue[0])
    # Array of return value that will transfer from the dict to the array as a string format
    uniqueValueOfDomain = []
    for emailDomain in wordDict:
        tempValue = str(wordDict[emailDomain]) + " " + str(emailDomain)
        print(tempValue)
        uniqueValueOfDomain.append(tempValue)

    return uniqueValueOfDomain


# Test Case Provided by the LeetCode
# print(subdomainVisits(["900 google.mail.com", "50 yahoo.com", "1 intel.mail.com", "5 wiki.org"]))
